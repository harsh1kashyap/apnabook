// <auto-generated />
using System;
using ApnaBook.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApnaBook.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ApnaBook.Domain.Entities.Books", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("author");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset>("DeletedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.Property<string>("StockQuantity")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("stock_quantity");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("p_k_books");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("i_x_books_category_id");

                    b.ToTable("books");
                });

            modelBuilder.Entity("ApnaBook.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset>("DeletedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("p_k_carts");

                    b.HasIndex("BookId")
                        .HasDatabaseName("i_x_carts_book_id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("i_x_carts_customer_id");

                    b.ToTable("carts");
                });

            modelBuilder.Entity("ApnaBook.Domain.Entities.Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("category_name");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset>("DeletedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.HasKey("Id")
                        .HasName("p_k_categories");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("ApnaBook.Domain.Entities.Customers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("confirm_password");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("customer_email");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("customer_name");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("customer_phone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset>("DeletedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("p_k_customers");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("ApnaBook.Domain.Entities.OrderItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset>("DeletedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int>("SubTotal")
                        .HasColumnType("int")
                        .HasColumnName("sub_total");

                    b.HasKey("Id")
                        .HasName("p_k_order_items");

                    b.HasIndex("BookId")
                        .HasDatabaseName("i_x_order_items_book_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("i_x_order_items_order_id");

                    b.ToTable("order_items");
                });

            modelBuilder.Entity("ApnaBook.Domain.Entities.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset>("DeletedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("order_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double")
                        .HasColumnName("total_amount");

                    b.HasKey("Id")
                        .HasName("p_k_orders");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("i_x_orders_customer_id");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("ApnaBook.Domain.Entities.Reviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<int>("BooksId")
                        .HasColumnType("int")
                        .HasColumnName("books_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("comment");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int>("CustomersId")
                        .HasColumnType("int")
                        .HasColumnName("customers_id");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset>("DeletedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.HasKey("Id")
                        .HasName("p_k_reviews");

                    b.HasIndex("BooksId")
                        .HasDatabaseName("i_x_reviews_books_id");

                    b.HasIndex("CustomersId")
                        .HasDatabaseName("i_x_reviews_customers_id");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("ApnaBook.Domain.Entities.TodoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset>("DeletedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("Done")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("done");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("ListId")
                        .HasColumnType("int")
                        .HasColumnName("list_id");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("Reminder")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("reminder");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("p_k_todo_items");

                    b.HasIndex("ListId")
                        .HasDatabaseName("i_x_todo_items_list_id");

                    b.ToTable("todo_items");
                });

            modelBuilder.Entity("ApnaBook.Domain.Entities.TodoList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("created_by");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset>("DeletedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("p_k_todo_lists");

                    b.ToTable("todo_lists");
                });

            modelBuilder.Entity("ApnaBook.Domain.Entities.Books", b =>
                {
                    b.HasOne("ApnaBook.Domain.Entities.Categories", "Categories")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_books__categories_category_id");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("ApnaBook.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ApnaBook.Domain.Entities.Books", "Books")
                        .WithMany("CartItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_carts_books_book_id");

                    b.HasOne("ApnaBook.Domain.Entities.Customers", "Customers")
                        .WithMany("CartItems")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_carts__customers_customer_id");

                    b.Navigation("Books");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("ApnaBook.Domain.Entities.OrderItems", b =>
                {
                    b.HasOne("ApnaBook.Domain.Entities.Books", "Books")
                        .WithMany("OrderItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_order_items_books_book_id");

                    b.HasOne("ApnaBook.Domain.Entities.Orders", "Orders")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_order_items__orders_order_id");

                    b.Navigation("Books");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ApnaBook.Domain.Entities.Orders", b =>
                {
                    b.HasOne("ApnaBook.Domain.Entities.Customers", "Customers")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_orders_customers_customer_id");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("ApnaBook.Domain.Entities.Reviews", b =>
                {
                    b.HasOne("ApnaBook.Domain.Entities.Books", "Books")
                        .WithMany("Reviews")
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_reviews_books_books_id");

                    b.HasOne("ApnaBook.Domain.Entities.Customers", "Customers")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_reviews_customers_customers_id");

                    b.Navigation("Books");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("ApnaBook.Domain.Entities.TodoItem", b =>
                {
                    b.HasOne("ApnaBook.Domain.Entities.TodoList", "List")
                        .WithMany("Items")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_todo_items__todo_lists_list_id");

                    b.Navigation("List");
                });

            modelBuilder.Entity("ApnaBook.Domain.Entities.Books", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ApnaBook.Domain.Entities.Categories", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("ApnaBook.Domain.Entities.Customers", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ApnaBook.Domain.Entities.Orders", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ApnaBook.Domain.Entities.TodoList", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
